
import java.io.*;
import java.nio.charset.Charset;
import java.util.List;

import edu.stanford.nlp.ling.Sentence;
import edu.stanford.nlp.ling.TaggedWord;
import edu.stanford.nlp.ling.HasWord;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.process.CoreLabelTokenFactory;
import edu.stanford.nlp.process.DocumentPreprocessor;
import edu.stanford.nlp.process.PTBTokenizer;
import edu.stanford.nlp.process.TokenizerFactory;
import edu.stanford.nlp.tagger.maxent.MaxentTagger;

/**
 * Jinghui Yu
 * Created on 3/2/2015
 *
 * A classifier that classifies words in user-provided sentences (i.e., {@code List<HasWord>})
 * according to tags by the dataprocessing. The sentences are generated by direct use
 * of the DocumentPreprocessor class.
 */
class Classifier {

    /**
     * Classifies the words in the given sentences, and save it to the corresponding set
     * @param input
     * @throws Exception
     */
    public static void classify(String input) throws Exception {
        MaxentTagger tagger = new MaxentTagger();
        TokenizerFactory<CoreLabel> ptbTokenizerFactory = PTBTokenizer.factory(new CoreLabelTokenFactory(),
                "untokenizable=noneKeep");

        byte[] bytes = input.getBytes(Charset.defaultCharset());
        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
        BufferedReader r = new BufferedReader(new InputStreamReader(bais, "utf-8"));

        DocumentPreprocessor documentPreprocessor = new DocumentPreprocessor(r);
        documentPreprocessor.setTokenizerFactory(ptbTokenizerFactory);

        PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out, "utf-8"));

        for (List<HasWord> sentence : documentPreprocessor) {
            List<TaggedWord> tSentence = tagger.tagSentence(sentence);
            for (TaggedWord tw : tSentence) {
                if (tw.tag().startsWith("NNP") || tw.tag().startsWith("NNPS")) {

                } else if (tw.tag().startsWith("VHG")){

                }
            }
        }
        pw.close();
    }

    /**
     * Adds the word to the given file
     * @param filename
     * @param word
     */
    private void addTo(String filename, String word) {

    }

}
